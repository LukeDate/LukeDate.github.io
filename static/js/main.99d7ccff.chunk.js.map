{"version":3,"sources":["pages/aboutme.js","pages/skills.js","pages/photos.js","pages/home.js","pages/hamsa.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","Text","AboutMe","List","Skills","href","target","Photos","Home","className","Hamsa","App","HamsaImg","HamsaLink","Link","to","src","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ilBAGA,IAAMA,EAAUC,YAAO,MAAPA,CAAH,KASPC,EAAOD,YAAO,IAAPA,CAAH,KAiBKE,EAbC,WAEZ,OACI,kBAACH,EAAD,KACI,kBAACE,EAAD,yBAGA,kBAACA,EAAD,wBACA,kBAACA,EAAD,gC,gdCpBZ,IAAMF,EAAUC,YAAO,MAAPA,CAAH,KASPC,EAAOD,YAAO,IAAPA,CAAH,KAIJG,EAAOH,YAAO,KAAPA,CAAH,KAiCKI,EA1BA,WACX,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,4GAGA,kBAAC,EAAD,KAAM,uBAAGC,KAAK,6CAA6CC,OAAO,UAA5D,yBACN,kBAAC,EAAD,gkBAEA,kBAAC,EAAD,2BACA,kBAACH,EAAD,KACI,4PAGJ,kBAAC,EAAD,YACA,kBAACA,EAAD,KACI,6CACA,iDACA,6CACA,sCACA,+DClCDI,EARA,WACX,OAGI,wCCMOC,EATF,WACT,OACI,4BAAQC,UAAU,cACd,wBAAIA,UAAU,kBAAd,aACA,uBAAGA,UAAU,eAAb,6TCGGC,EARD,WACV,OACI,wC,8OCoEOC,MAvDf,WACE,IAAMC,EAAWZ,YAAO,MAAPA,CAAH,KAKRa,EAAYb,YAAOc,IAAPd,CAAH,KAMf,OACE,yBAAKS,UAAU,OACb,kBAAC,IAAD,KACA,yBAAKA,UAAU,OACb,kBAAC,IAAD,CAAMM,GAAG,KAAT,QAGA,kBAAC,IAAD,CAAMA,GAAG,0BAAT,6BAGA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YAGA,kBAAC,IAAD,CAAMA,GAAG,gBAAT,gBAIA,kBAACF,EAAD,CAAWE,GAAG,SACZ,kBAACH,EAAD,CAAUI,IAAI,gBAGhB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,0BACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,WCpDQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.99d7ccff.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled('div')`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: flex-start;\n    color: #e8e8e8;\n    padding: 40px 60px;\n`;\n\nconst Text = styled('p')`\n    text-align: left;\n`;\n\nconst AboutMe = () => {\n\n    return (\n        <Wrapper>\n            <Text>\n                Where I am from:\n            </Text>\n            <Text>Where I grew up</Text>\n            <Text>Hobbies and interests</Text>\n        </Wrapper>\n    )\n}\n\nexport default AboutMe;","import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Wrapper = styled('div')`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: flex-start;\n    color: #e8e8e8;\n    padding: 40px 60px;\n`;\n\nconst Text = styled('p')`\n    text-align: left;\n`;\n\nconst List = styled('ul')`\n    list-style: none;\n    > li {\n        text-align: left;\n    }\n`;\n\nconst Skills = () => {\n    return (\n        <Wrapper>\n            <Text>\n                University Of Southampton - Master of Physics with Astronomy: Second Class Honours (Upper Division)\n            </Text>\n            <Text><a href=\"/transcript/Transcript_Final_Luke_Date.pdf\" target='_blank'>Transcript of grades</a></Text>\n            <Text>Over the four year course I developed many technical skills covering a wide range of disciplines - Mathematical methods, advanced Physics, laboratory techniques, data handling, data modelling using Python and using practical astronomy equipment and software. I have a passion for astronomy and cosmology and enjoy learning about the inner workings of the Universe. In my final year Master's project I gained experience in measuring the age of the Universe through historical techniques of famous Physicists whilst using the latest astronomy equipment to gather data. </Text>\n\n            <Text>Create Music Group</Text>\n            <List>\n                <li>Developed applications for music royalty management for various artists and labels. Used React and front end PHP for mobile and web based apps - allowing artists to manage music distribution, royalties and music demos. </li>\n            </List>\n\n            <Text>IBM</Text>\n            <List>\n                <li>Ernst & Young</li>\n                <li>British Petroleum</li>\n                <li>Barclays Bank</li>\n                <li>Diageo</li>\n                <li>IBM Client Innovation Centre</li>\n            </List>\n        </Wrapper>\n    )\n}\n\nexport default Skills;\n\n","import React from 'react';\n\nconst Photos = () => {\n    return(\n\n        //how should I have gallery? Grid options with button? All photos? Section? (astro, landscape, artsy ones)\n        <div>Photos</div>\n    )\n}\n\nexport default Photos;\n\n","import React from 'react';\nimport '../App.scss';\n\nconst Home = () => {\n    return (\n        <header className=\"App-header\">\n            <h1 className=\"Portfolio-Name\">Luke Date</h1>\n            <p className=\"Description\">Experienced Developer with a demonstrated history of working in the computer software industry. Skilled in ReactJS, Fullstack Web Development, Customer Service and Cloud Applications. Strong physical sciences professional graduated from University of Southampton. Currently based in Vancouver, British Columbia.</p>\n      </header>\n    )\n}\n\nexport default Home;","import React from 'react';\n\nconst Hamsa = () => {\n    return (\n        <div>\n            HELLOs\n        </div>\n    )\n}\n\nexport default Hamsa;","import React from 'react';\nimport './App.scss';\nimport styled from 'styled-components';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport AboutMe from './pages/aboutme';\nimport Skills from './pages/skills';\nimport Photos from './pages/photos';\nimport Home from './pages/home';\nimport Hamsa from './pages/hamsa';\n\n\n\nfunction App() {\n  const HamsaImg = styled('img')`\n  width: 50px;\n  height: 50px;\n`;\n\n  const HamsaLink = styled(Link)`\n    position: absolute;\n    bottom: 10px;\n    left: 10px;\n  `;\n\n  return (\n    <div className=\"App\">\n      <Router>\n      <div className=\"nav\">\n        <Link to=\"/\">\n          Home\n        </Link>\n        <Link to=\"/skills+qualifications\">\n          Skills and Qualifications\n        </Link>\n        <Link to=\"/about+me\">\n          About Me\n        </Link>\n        <Link to=\"/photography\">\n          Photography\n        </Link>\n      </div>\n        <HamsaLink to=\"/life\">\n          <HamsaImg src=\"/hamsa.png\" />\n        </HamsaLink>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/skills+qualifications\">\n            <Skills />\n          </Route>\n          <Route path=\"/photography\">\n            <Photos />\n          </Route>\n          <Route path=\"/about+me\">\n            <AboutMe />\n          </Route>\n          <Route path=\"/life\">\n            <Hamsa />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}